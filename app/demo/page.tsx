"use client";

import { useState } from "react";
import { CheckCircle } from "lucide-react";
import { x402axios } from "../../lib/x402-axios";
export const dynamic = 'force-dynamic';

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [response, setResponse] = useState<any>(null);
  const [step, setStep] = useState<"initial" | "success">("initial");
  const [paymentDetails, setPaymentDetails] = useState<any>(null);
  const [timing, setTiming] = useState<any>(null);

  // Demo private key (generated by scripts/generate-account.ts)
  const DEMO_PRIVATE_KEY = process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY!;

  if (!DEMO_PRIVATE_KEY) {
    throw new Error("DEMO_PRIVATE_KEY is not set");
  }

  const API_URL = `${typeof window !== 'undefined' ? window.location.origin : ''}/api/protected/weather`;

  const makeRequest = async () => {
    setLoading(true);
    setResponse(null);
    setTiming(null);

    try {
      console.log('\n Using Oliviax402 (Simple BNB payment wrapper)...');
      console.log('This will:');
      console.log('  1. Make request to the protected API');
      console.log('  2. Detect 402 Payment Required response');
      console.log('  3. Extract payment requirements from the 402 spec');
      console.log('  4. Build & sign payment transaction automatically');
      console.log('  5. Retry with X-PAYMENT header');
      console.log('  6. Return the response\n');

      const startTime = performance.now();
      
      // Simple! Just privateKey and url
      const result = await x402axios({
        privateKey: DEMO_PRIVATE_KEY,
        url: API_URL,
      });
      
      const endTime = performance.now();
      const totalTime = Math.round(endTime - startTime);

      console.log('✅ x402 completed successfully!');

      // Extract timing headers if present
      const verificationTime = result.headers['x-verification-time'];
      const settlementTime = result.headers['x-settlement-time'];
      
      // Payment info is automatically included
      if (result.paymentInfo) {
        console.log('💰 Payment Info:', {
          transactionHash: result.paymentInfo.transactionHash,
          amount: result.paymentInfo.amount,
          recipient: result.paymentInfo.recipient,
          settled: result.paymentInfo.settled,
        });
      }

      setResponse({
        status: result.status,
        statusText: "OK",
        requestHeaders: {
          "X-PAYMENT": "Automatically handled by Oliviax402"
        },
        responseHeaders: result.headers,
        body: result.data,
        transactionHash: result.paymentInfo?.transactionHash,
        paymentInfo: result.paymentInfo,
      });

      setTiming({
        total: totalTime,
        verification: verificationTime ? parseInt(verificationTime) : null,
        settlement: settlementTime ? parseInt(settlementTime) : null,
      });

      if (result.status === 200) {
        setStep("success");
      }
    } catch (err: any) {
      console.error('❌ Error during x402-axios request:', err);
      setResponse({ 
        error: err.message || String(err),
        details: err.response?.data 
      });
    } finally {
      setLoading(false);
    }
  };

  const reset = () => {
    setStep("initial");
    setResponse(null);
    setTiming(null);
  };

  return (
    <div className="min-h-screen bg-white pt-24 px-8 pb-8">
      <div className="max-w-7xl mx-auto">
        {/* Header */}
        <div className="text-center mb-8">
          <h1 className="text-4xl font-bold text-black mb-2">
            x402 Payment Protocol Demo
          </h1>
          <p className="text-gray-700">HTTP 402 on BNB Blockchain</p>
        </div>

        {/* Two Column Layout */}
        <div className="grid grid-cols-2 gap-6">
          {/* Left: Response Display */}
          <div className="bg-gray-50 border border-black rounded-lg p-6">
            <h2 className="text-xl font-semibold mb-4 text-black">
              API Response
            </h2>
            
                    {response ? (
                      <div className="space-y-4">
                        <div>
                          <p className="text-sm text-gray-700 mb-1">Status:</p>
                          <p className="font-mono text-black font-semibold">
                            {response.status} {response.statusText}
                          </p>
                        </div>

                        {timing && (
                          <div>
                            <p className="text-sm text-gray-700 mb-1">Response Time:</p>
                            <div className="bg-white border border-gray-300 p-3 rounded text-sm space-y-1">
                              <div className="flex justify-between">
                                <span className="text-gray-600">Total:</span>
                                <span className="font-mono font-semibold text-black">{timing.total}ms</span>
                              </div>
                              {timing.verification && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ Verification:</span>
                                  <span className="font-mono text-gray-700">{timing.verification}ms</span>
                                </div>
                              )}
                              {timing.settlement && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ Settlement:</span>
                                  <span className="font-mono text-gray-700">{timing.settlement}ms</span>
                                </div>
                              )}
                              {timing.verification && timing.settlement && (
                                <div className="flex justify-between text-xs">
                                  <span className="text-gray-600">↳ API Processing:</span>
                                  <span className="font-mono text-gray-700">
                                    {timing.total - timing.verification - timing.settlement}ms
                                  </span>
                                </div>
                              )}
                            </div>
                          </div>
                        )}

                        {response.responseHeaders && (
                          <div>
                            <p className="text-sm text-gray-700 mb-1">Response Headers:</p>
                            <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                              {JSON.stringify(response.responseHeaders, null, 2)}
                            </pre>
                          </div>
                        )}

                        <div>
                          <p className="text-sm text-gray-700 mb-1">Response Body:</p>
                          <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                            {JSON.stringify(response.body || response.error, null, 2)}
                          </pre>
                        </div>
                      </div>
                    ) : (
                      <p className="text-gray-500 text-center py-12">
                        No response yet. Make a request to see the response here.
                      </p>
                    )}
          </div>

          {/* Right: Action Prompts */}
          <div className="space-y-6">
            {/* Single button - does everything */}
            {step === "initial" && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-3 text-black">
                  Access Protected Weather API
                </h2>
          <p className="text-gray-700 mb-4 text-sm">
            Click below to access the protected weather API. The Oliviax402() function will automatically handle the payment if required!
          </p>
          <p className="text-gray-600 mb-4 text-xs italic">
            💡 Open DevTools Network tab to see 2 requests: first without payment (gets 402), then with payment (gets data)
          </p>
                <button
                  onClick={makeRequest}
                  disabled={loading}
                  className="w-full bg-black text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-800 disabled:opacity-50 disabled:cursor-not-allowed"
                >
                  {loading ? "Processing (x402Axios)..." : "Request Weather API →"}
                </button>
              </div>
            )}

            {/* Success */}
            {step === "success" && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h2 className="text-xl font-semibold mb-3 text-black flex items-center gap-2">
                  <CheckCircle className="w-6 h-6 text-green-600" />
                  Payment Successful
                </h2>
                <p className="text-gray-700 mb-4 text-sm">
                  Payment verified and settled. The protected resource has been delivered.
                </p>
                
                {response?.transactionHash && (
                  <div className="mb-4 p-3 bg-white border border-gray-300 rounded text-sm">
                    <p className="text-gray-700 mb-2">
                      <strong>Transaction Hash:</strong>
                    </p>
                    <code className="bg-gray-100 px-2 py-1 rounded text-xs font-mono text-black break-all block mb-2">
                      {response.transactionHash}
                    </code>
                    <a
                      href={`https://explorer.aptoslabs.com/txn/${response.transactionHash}?network=testnet`}
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-blue-600 hover:text-blue-800 text-xs underline"
                    >
                      View on Explorer →
                    </a>
                  </div>
                )}
                
                <button
                  onClick={reset}
                  className="w-full bg-black text-white px-6 py-3 rounded-lg font-medium hover:bg-gray-800"
                >
                  Start Over →
                </button>
              </div>
            )}

            {/* Request Headers Box */}
            {response && response.requestHeaders && Object.keys(response.requestHeaders).length > 0 && (
              <div className="bg-gray-50 border border-black rounded-lg p-6">
                <h3 className="font-semibold mb-2 text-black text-sm">
                  Request Headers:
                </h3>
                <pre className="bg-black text-white p-3 rounded text-xs overflow-x-auto">
                  {JSON.stringify(response.requestHeaders, null, 2)}
                </pre>
              </div>
            )}

            {/* Info Box */}
            <div className="bg-gray-50 border border-black rounded-lg p-6">
              <h3 className="font-semibold mb-2 text-black text-sm">
                How Oliviax402 works:
              </h3>
              <ol className="list-decimal list-inside space-y-1 text-xs text-gray-700">
                <li><strong>Initial Request:</strong> Tries to access resource (no payment)</li>
                <li><strong>402 Detection:</strong> Server returns 402 with payment spec</li>
                <li><strong>Extract Requirements:</strong> Gets network, amount, recipient from 402</li>
                <li><strong>Build & Sign:</strong> Creates and signs transaction automatically</li>
                <li><strong>Retry with Payment:</strong> Resends request with X-PAYMENT header</li>
                <li><strong>Verification:</strong> Middleware calls facilitator to verify</li>
                <li><strong>Settlement:</strong> Facilitator submits to Aptos blockchain</li>
                <li><strong>Success:</strong> Returns resource + transaction hash</li>
              </ol>
              <p className="text-xs text-gray-600 mt-3 italic">
                ✨ Just call x402Axios(&#123; privateKey, url &#125;) - that&apos;s it!
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

